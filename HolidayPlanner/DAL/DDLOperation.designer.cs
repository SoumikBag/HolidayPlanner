#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HolidayPlanner.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HolidayPlanner")]
	public partial class DDLOperationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHotel(Hotel instance);
    partial void UpdateHotel(Hotel instance);
    partial void DeleteHotel(Hotel instance);
    partial void InsertHotelType(HotelType instance);
    partial void UpdateHotelType(HotelType instance);
    partial void DeleteHotelType(HotelType instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertFacility(Facility instance);
    partial void UpdateFacility(Facility instance);
    partial void DeleteFacility(Facility instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    #endregion
		
		public DDLOperationDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HolidayPlannerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DDLOperationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DDLOperationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DDLOperationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DDLOperationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hotel> Hotels
		{
			get
			{
				return this.GetTable<Hotel>();
			}
		}
		
		public System.Data.Linq.Table<HotelType> HotelTypes
		{
			get
			{
				return this.GetTable<HotelType>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Facility> Facilities
		{
			get
			{
				return this.GetTable<Facility>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hotel")]
	public partial class Hotel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HotelId;
		
		private string _HotelName;
		
		private string _HotelDetails;
		
		private string _CityId;
		
		private string _Address;
		
		private string _HTypeId;
		
		private string _HotelPolices;
		
		private string _FoodDetails;
		
		private System.Nullable<int> _Distance;
		
		private string _Budget;
		
		private EntitySet<Facility> _Facilities;
		
		private EntitySet<Room> _Rooms;
		
		private EntitySet<Location> _Locations;
		
		private EntityRef<HotelType> _HotelType;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelIdChanging(int value);
    partial void OnHotelIdChanged();
    partial void OnHotelNameChanging(string value);
    partial void OnHotelNameChanged();
    partial void OnHotelDetailsChanging(string value);
    partial void OnHotelDetailsChanged();
    partial void OnCityIdChanging(string value);
    partial void OnCityIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnHTypeIdChanging(string value);
    partial void OnHTypeIdChanged();
    partial void OnHotelPolicesChanging(string value);
    partial void OnHotelPolicesChanged();
    partial void OnFoodDetailsChanging(string value);
    partial void OnFoodDetailsChanged();
    partial void OnDistanceChanging(System.Nullable<int> value);
    partial void OnDistanceChanged();
    partial void OnBudgetChanging(string value);
    partial void OnBudgetChanged();
    #endregion
		
		public Hotel()
		{
			this._Facilities = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities), new Action<Facility>(this.detach_Facilities));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._HotelType = default(EntityRef<HotelType>);
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HotelId
		{
			get
			{
				return this._HotelId;
			}
			set
			{
				if ((this._HotelId != value))
				{
					this.OnHotelIdChanging(value);
					this.SendPropertyChanging();
					this._HotelId = value;
					this.SendPropertyChanged("HotelId");
					this.OnHotelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelName", DbType="NVarChar(50)")]
		public string HotelName
		{
			get
			{
				return this._HotelName;
			}
			set
			{
				if ((this._HotelName != value))
				{
					this.OnHotelNameChanging(value);
					this.SendPropertyChanging();
					this._HotelName = value;
					this.SendPropertyChanged("HotelName");
					this.OnHotelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelDetails", DbType="NVarChar(2000)")]
		public string HotelDetails
		{
			get
			{
				return this._HotelDetails;
			}
			set
			{
				if ((this._HotelDetails != value))
				{
					this.OnHotelDetailsChanging(value);
					this.SendPropertyChanging();
					this._HotelDetails = value;
					this.SendPropertyChanged("HotelDetails");
					this.OnHotelDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HTypeId", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string HTypeId
		{
			get
			{
				return this._HTypeId;
			}
			set
			{
				if ((this._HTypeId != value))
				{
					if (this._HotelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHTypeIdChanging(value);
					this.SendPropertyChanging();
					this._HTypeId = value;
					this.SendPropertyChanged("HTypeId");
					this.OnHTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelPolices", DbType="NVarChar(1000)")]
		public string HotelPolices
		{
			get
			{
				return this._HotelPolices;
			}
			set
			{
				if ((this._HotelPolices != value))
				{
					this.OnHotelPolicesChanging(value);
					this.SendPropertyChanging();
					this._HotelPolices = value;
					this.SendPropertyChanged("HotelPolices");
					this.OnHotelPolicesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDetails", DbType="NVarChar(1000)")]
		public string FoodDetails
		{
			get
			{
				return this._FoodDetails;
			}
			set
			{
				if ((this._FoodDetails != value))
				{
					this.OnFoodDetailsChanging(value);
					this.SendPropertyChanging();
					this._FoodDetails = value;
					this.SendPropertyChanged("FoodDetails");
					this.OnFoodDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Int")]
		public System.Nullable<int> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Budget", DbType="NVarChar(50)")]
		public string Budget
		{
			get
			{
				return this._Budget;
			}
			set
			{
				if ((this._Budget != value))
				{
					this.OnBudgetChanging(value);
					this.SendPropertyChanging();
					this._Budget = value;
					this.SendPropertyChanged("Budget");
					this.OnBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Facility", Storage="_Facilities", ThisKey="HotelId", OtherKey="HotelId")]
		public EntitySet<Facility> Facilities
		{
			get
			{
				return this._Facilities;
			}
			set
			{
				this._Facilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Room", Storage="_Rooms", ThisKey="HotelId", OtherKey="HotelId")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Location", Storage="_Locations", ThisKey="HotelId", OtherKey="HotelId")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HotelType_Hotel", Storage="_HotelType", ThisKey="HTypeId", OtherKey="HTypeId", IsForeignKey=true)]
		public HotelType HotelType
		{
			get
			{
				return this._HotelType.Entity;
			}
			set
			{
				HotelType previousValue = this._HotelType.Entity;
				if (((previousValue != value) 
							|| (this._HotelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HotelType.Entity = null;
						previousValue.Hotels.Remove(this);
					}
					this._HotelType.Entity = value;
					if ((value != null))
					{
						value.Hotels.Add(this);
						this._HTypeId = value.HTypeId;
					}
					else
					{
						this._HTypeId = default(string);
					}
					this.SendPropertyChanged("HotelType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Hotel", Storage="_City", ThisKey="CityId", OtherKey="CityId", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Hotels.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Hotels.Add(this);
						this._CityId = value.CityId;
					}
					else
					{
						this._CityId = default(string);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelType")]
	public partial class HotelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HTypeId;
		
		private string _HotelType1;
		
		private EntitySet<Hotel> _Hotels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHTypeIdChanging(string value);
    partial void OnHTypeIdChanged();
    partial void OnHotelType1Changing(string value);
    partial void OnHotelType1Changed();
    #endregion
		
		public HotelType()
		{
			this._Hotels = new EntitySet<Hotel>(new Action<Hotel>(this.attach_Hotels), new Action<Hotel>(this.detach_Hotels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HTypeId", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HTypeId
		{
			get
			{
				return this._HTypeId;
			}
			set
			{
				if ((this._HTypeId != value))
				{
					this.OnHTypeIdChanging(value);
					this.SendPropertyChanging();
					this._HTypeId = value;
					this.SendPropertyChanged("HTypeId");
					this.OnHTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="HotelType", Storage="_HotelType1", DbType="NVarChar(50)")]
		public string HotelType1
		{
			get
			{
				return this._HotelType1;
			}
			set
			{
				if ((this._HotelType1 != value))
				{
					this.OnHotelType1Changing(value);
					this.SendPropertyChanging();
					this._HotelType1 = value;
					this.SendPropertyChanged("HotelType1");
					this.OnHotelType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HotelType_Hotel", Storage="_Hotels", ThisKey="HTypeId", OtherKey="HTypeId")]
		public EntitySet<Hotel> Hotels
		{
			get
			{
				return this._Hotels;
			}
			set
			{
				this._Hotels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.HotelType = this;
		}
		
		private void detach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.HotelType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CityId;
		
		private string _CityName;
		
		private string _StateId;
		
		private EntitySet<Hotel> _Hotels;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIdChanging(string value);
    partial void OnCityIdChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnStateIdChanging(string value);
    partial void OnStateIdChanged();
    #endregion
		
		public City()
		{
			this._Hotels = new EntitySet<Hotel>(new Action<Hotel>(this.attach_Hotels), new Action<Hotel>(this.detach_Hotels));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Hotel", Storage="_Hotels", ThisKey="CityId", OtherKey="CityId")]
		public EntitySet<Hotel> Hotels
		{
			get
			{
				return this._Hotels;
			}
			set
			{
				this._Hotels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_City", Storage="_State", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(string);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Facilities")]
	public partial class Facility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FacilityId;
		
		private int _HotelId;
		
		private string _FacilitiesType;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacilityIdChanging(string value);
    partial void OnFacilityIdChanged();
    partial void OnHotelIdChanging(int value);
    partial void OnHotelIdChanged();
    partial void OnFacilitiesTypeChanging(string value);
    partial void OnFacilitiesTypeChanged();
    #endregion
		
		public Facility()
		{
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityId", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FacilityId
		{
			get
			{
				return this._FacilityId;
			}
			set
			{
				if ((this._FacilityId != value))
				{
					this.OnFacilityIdChanging(value);
					this.SendPropertyChanging();
					this._FacilityId = value;
					this.SendPropertyChanged("FacilityId");
					this.OnFacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", DbType="Int NOT NULL")]
		public int HotelId
		{
			get
			{
				return this._HotelId;
			}
			set
			{
				if ((this._HotelId != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelIdChanging(value);
					this.SendPropertyChanging();
					this._HotelId = value;
					this.SendPropertyChanged("HotelId");
					this.OnHotelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilitiesType", DbType="NVarChar(100)")]
		public string FacilitiesType
		{
			get
			{
				return this._FacilitiesType;
			}
			set
			{
				if ((this._FacilitiesType != value))
				{
					this.OnFacilitiesTypeChanging(value);
					this.SendPropertyChanging();
					this._FacilitiesType = value;
					this.SendPropertyChanged("FacilitiesType");
					this.OnFacilitiesTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Facility", Storage="_Hotel", ThisKey="HotelId", OtherKey="HotelId", IsForeignKey=true)]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.Facilities.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.Facilities.Add(this);
						this._HotelId = value.HotelId;
					}
					else
					{
						this._HotelId = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoomId;
		
		private int _HotelId;
		
		private string _RoomType;
		
		private string _RoomCapacity;
		
		private string _RoomDetails;
		
		private string _Rate;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIdChanging(string value);
    partial void OnRoomIdChanged();
    partial void OnHotelIdChanging(int value);
    partial void OnHotelIdChanged();
    partial void OnRoomTypeChanging(string value);
    partial void OnRoomTypeChanged();
    partial void OnRoomCapacityChanging(string value);
    partial void OnRoomCapacityChanged();
    partial void OnRoomDetailsChanging(string value);
    partial void OnRoomDetailsChanged();
    partial void OnRateChanging(string value);
    partial void OnRateChanged();
    #endregion
		
		public Room()
		{
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", DbType="Int NOT NULL")]
		public int HotelId
		{
			get
			{
				return this._HotelId;
			}
			set
			{
				if ((this._HotelId != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelIdChanging(value);
					this.SendPropertyChanging();
					this._HotelId = value;
					this.SendPropertyChanged("HotelId");
					this.OnHotelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomType", DbType="NVarChar(50)")]
		public string RoomType
		{
			get
			{
				return this._RoomType;
			}
			set
			{
				if ((this._RoomType != value))
				{
					this.OnRoomTypeChanging(value);
					this.SendPropertyChanging();
					this._RoomType = value;
					this.SendPropertyChanged("RoomType");
					this.OnRoomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomCapacity", DbType="NVarChar(50)")]
		public string RoomCapacity
		{
			get
			{
				return this._RoomCapacity;
			}
			set
			{
				if ((this._RoomCapacity != value))
				{
					this.OnRoomCapacityChanging(value);
					this.SendPropertyChanging();
					this._RoomCapacity = value;
					this.SendPropertyChanged("RoomCapacity");
					this.OnRoomCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomDetails", DbType="NVarChar(200)")]
		public string RoomDetails
		{
			get
			{
				return this._RoomDetails;
			}
			set
			{
				if ((this._RoomDetails != value))
				{
					this.OnRoomDetailsChanging(value);
					this.SendPropertyChanging();
					this._RoomDetails = value;
					this.SendPropertyChanged("RoomDetails");
					this.OnRoomDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="NVarChar(50)")]
		public string Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Room", Storage="_Hotel", ThisKey="HotelId", OtherKey="HotelId", IsForeignKey=true)]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._HotelId = value.HotelId;
					}
					else
					{
						this._HotelId = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryId;
		
		private string _CountryName;
		
		private EntitySet<State> _States;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(string value);
    partial void OnCountryIdChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_State", Storage="_States", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StateId;
		
		private string _StateName;
		
		private string _CountryId;
		
		private EntitySet<City> _Cities;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(string value);
    partial void OnStateIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnCountryIdChanging(string value);
    partial void OnCountryIdChanged();
    #endregion
		
		public State()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(50)")]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_City", Storage="_Cities", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_State", Storage="_Country", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.States.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private string _LocationName;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private int _HotelId;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnHotelIdChanging(int value);
    partial void OnHotelIdChanged();
    #endregion
		
		public Location()
		{
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", DbType="Int NOT NULL")]
		public int HotelId
		{
			get
			{
				return this._HotelId;
			}
			set
			{
				if ((this._HotelId != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelIdChanging(value);
					this.SendPropertyChanging();
					this._HotelId = value;
					this.SendPropertyChanged("HotelId");
					this.OnHotelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_Location", Storage="_Hotel", ThisKey="HotelId", OtherKey="HotelId", IsForeignKey=true)]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._HotelId = value.HotelId;
					}
					else
					{
						this._HotelId = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
